#
#  crude canvas emulation for NaTcl -- mapping to HTML5 canvas
#
set ::canv_verbose 0

set ::canv_uniq 1
set ::canv_hooked 0
set ::canv_tlist {}
set ::canv_jcnt 0
set ::canv_status_func 0
set ::canv_status_coords 0

# canv_status_coords : 1: some old items moved
# canv_status_func: 0:unchanged 1:new-items-on-top 2:changed

proc canv_addhook {} {
    if {$::canv_hooked} return
    set ::canv_hooked 1
    lappend ::naclhooks canv_hook
}

proc canv_new_items {} {
    return [lrange $::canv_tlist $::canv_jcnt end]
}

proc canv_compile_repaint l {
    set j ""
    set oldprep ""
    foreach i $l {
	set prep $::canv_jprep($i)
	if {[string compare $prep $oldprep]} {
	    set oldprep $prep
	    append j $prep
	}
	append j $::canv_jdraw($i)
    }
    return $j
}

proc canv_hook {} {
    set ::canv_hooked 0
    set repaint 0
    if {$::canv_status_coords} {
	set repaint 1
    }
    if {![info exists ::canv_jcode]} {
	set ::canv_status_func 2
    }
    switch $::canv_status_func {
	0 {
	    # valid, do nothing
	}
	1 {
	    # incremental, append
	    set jnew [canv_compile_repaint [canv_new_items]]
	    append ::canv_jcode $jnew
	    append js "repaint = function(){\n$::canv_jcode\n}\n"
	    if {!$repaint} {
		# old ones didn't move: just draw the new ones
		append js $jnew
	    }
	    set ::canv_jcnt [llength $::canv_tlist]
	}
	2 {
	    # invalid, recompute
	    set ::canv_jcode "context.clearRect(0,0,canvas.width,canvas.height);
\n"
	    append ::canv_jcode [canv_compile_repaint $::canv_tlist]
	    append js "repaint=function(){\n$::canv_jcode\n}\n"
	    set ::canv_jcnt [llength $::canv_tlist]
	    set repaint 1
	}
    }
    foreach i [array names ::canv_moved] {
	append js "canvcoords\[$i\]=\[[join $::canv_coords($i) ,]\];\n"
    }
    if {$repaint} {
	append js "repaint();\n"
    }
    set ::canv_status_func 0
    set ::canv_status_coords 0
    array unset ::canv_moved

    if {[info exists js]} {
	if {$::canv_verbose} {
	    printf "CANV_HOOK emits:\n$js\n"
	}
	append ::JS $js
    }
}

proc lremove {l e} {
     set out {}
    foreach x $l {
	if {$x==$e} continue
	lappend out $x
    }
    return $out
}

proc canv_delete id { 
    if {$id=="all"} {
	array unset ::canv_moved
	array unset ::canv_coords
	array unset ::canv_jprep
	array unset ::canv_jdraw
	set ::canv_tlist {}
	set ::canv_status_func 2
    } else {
	catch {unset ::canv_moved($id)}
	unset ::canv_coords($id)
	unset ::canv_jprep($id)
	unset ::canv_jdraw($id)
	set ::canv_tlist [lremove $::canv_tlist $id]
	set ::canv_status_func 2
    }
    canv_addhook
}

proc canv_find tag {
    if {$tag!="all"} {
	error "Unsupported tag '$tag'"
    }
    return $::canv_tlist
}

proc canv_create {ty args} {
    set id $::canv_uniq
    incr ::canv_uniq
    lappend ::canv_tlist $id
    set att(-fill) "#FFFFFF"
    set att(-outline) "#000000"
    switch -exact -- $ty {
	rect {
	    foreach {x1 y1 x2 y2} $args break
	    set ::canv_coords($id) [list $x1 $y1 [expr {$x2-$x1}] [expr {$y2-$y1}]]
	    array set att [lrange $args 4 end]
	    set prep ""
	    set draw ""
	    if {$att(-outline)!=""} {append prep "context.strokeStyle='$att(-outline)';";append draw "context.stroke();"}
	    if {$att(-fill)!=""} {append prep "context.fillStyle='$att(-fill)';";append draw "context.fill();"}
	    set ::canv_jprep($id) $prep
	    set ::canv_jdraw($id) "context.beginPath();context.rect(canvcoords\[$id\]\[0\],canvcoords\[$id\]\[1\],canvcoords\[$id\]\[2\],canvcoords\[$id\]\[3\]);$draw\n"
	}
	circle {
	    set ::canv_coords($id) [lrange $args 0 2]
	    array set att [lrange $args 3 end]
	    set prep ""
	    set draw ""
	    if {$att(-outline)!=""} {append prep "context.strokeStyle='$att(-outline)';";append draw "context.stroke();"}
	    if {$att(-fill)!=""} {append prep "context.fillStyle='$att(-fill)';";append draw "context.fill();"}
	    set ::canv_jprep($id) $prep
	    set ::canv_jdraw($id) "context.beginPath();context.arc(canvcoords\[$id\]\[0\],canvcoords\[$id\]\[1\],canvcoords\[$id\]\[2\],0,2*Math.PI,0);$draw\n"
	}
	default {error "Unknown canv item type '$ty'"}
    }
    set ::canv_type($id) $ty
    if {!$::canv_status_func} {
	# incremental
	set ::canv_status_func 1
    }
    set ::canv_moved($id) 1
    canv_addhook
    return $id
}

proc canv_move {id dx dy} {
    foreach {x y} $::canv_coords($id) break
    incr x $dx
    incr y $dy
    set ::canv_coords($id) [concat [list $x $y] [lrange $::canv_coords($id) 2 end]]
    if {![info exists ::canv_moved($id)]} {
	set ::canv_moved($id) 1
	set ::canv_status_coords 1
    }
}

proc canv_moveto {id x y} {
    set ::canv_coords($id) [concat [list $x $y] [lrange $::canv_coords($id) 2 end]]
    if {![info exists ::canv_moved($id)]} {
	set ::canv_moved($id) 1
	set ::canv_status_coords 1
    }
}

proc canv_bind {evt cb} {
    switch -exact -- $evt {
	<Motion> {
	    append ::JS "canvas.onmousemove = function (evt) {
			tclDo([jsquote "$cb "]+(evt.clientX-canvas.offsetLeft)+' '+(evt.clientY-canvas.offsetTop));
		};\n"
	}
	<Leave> {
	    append ::JS "canvas.onmouseout = function (evt) {
			tclDo([jsquote "$cb "]);
		};\n"
	}
	<Enter> {
	    append ::JS "canvas.onmouseover = function (evt) {
			tclDo([jsquote "$cb "]);
		};\n"
	}
	default {error "Unsupported event '$evt'"}
    }
}