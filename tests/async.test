# Commands covered:  none
#
# This file contains a collection of tests for Tcl_AsyncCreate and related
# library procedures.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1993 The Regents of the University of California.
# Copyright (c) 1994-1996 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}

testConstraint testasync [llength [info commands testasync]]
testConstraint threaded [expr {
    [info exists ::tcl_platform(threaded)] && $::tcl_platform(threaded)
}]

proc wait_4_valgrind {} {
    # @ people using valgrind: please define env variable VALGRIND=1,
    # or we can include it in some constraint...
    # or simply provide better valgrind detection.
    if {[info exists ::env(VALGRIND)] && $::env(VALGRIND)} {
        # give other threads some time to go way so that valgrind doesn't pick up
        # "still reachable" cases from early thread termination
	after 100
    }
}

proc async1 {result code} {
    global aresult acode
    set aresult $result
    set acode $code
    return "new result"
}
proc async2 {result code} {
    global aresult acode
    set aresult $result
    set acode $code
    return -code error "xyzzy"
}
proc async3 {result code} {
    global aresult
    set aresult "test pattern"
    return -code $code $result
}
proc \# {result code} {
    global aresult acode
    set aresult $result
    set acode $code
    return "comment quoting"
}

if {[testConstraint testasync]} {
    set handler1 [testasync create async1]
    set handler2 [testasync create async2]
    set handler3 [testasync create async3]
    set handler4 [testasync create \#]
}
test async-1.1 {basic async handlers} testasync {
    set aresult xxx
    set acode yyy
    list [catch {testasync mark $handler1 "original" 0} msg] $msg \
	   $acode $aresult
} {0 {new result} 0 original}
test async-1.2 {basic async handlers} testasync {
    set aresult xxx
    set acode yyy
    list [catch {testasync mark $handler1 "original" 1} msg] $msg \
	   $acode $aresult
} {0 {new result} 1 original}
test async-1.3 {basic async handlers} testasync {
    set aresult xxx
    set acode yyy
    list [catch {testasync mark $handler2 "old" 0} msg] $msg \
	   $acode $aresult
} {1 xyzzy 0 old}
test async-1.4 {basic async handlers} testasync {
    set aresult xxx
    set acode yyy
    list [catch {testasync mark $handler2 "old" 3} msg] $msg \
	   $acode $aresult
} {1 xyzzy 3 old}
test async-1.5 {basic async handlers} testasync {
    set aresult xxx
    list [catch {testasync mark $handler3 "foobar" 0} msg] $msg $aresult
} {0 foobar {test pattern}}
test async-1.6 {basic async handlers} testasync {
    set aresult xxx
    list [catch {testasync mark $handler3 "foobar" 1} msg] $msg $aresult
} {1 foobar {test pattern}}
test async-1.7 {basic async handlers} testasync {
    set aresult xxx
    set acode yyy
    list [catch {testasync mark $handler4 "original" 0} msg] $msg \
	   $acode $aresult
} {0 {comment quoting} 0 original}

proc mult1 {result code} {
    global x
    lappend x m1:mult1
    return -code 7 mult1
}
proc mult2 {result code} {
    global x
    lappend x m2:mult2
    return -code 9 mult2
}
proc mult3 {result code} {
    global x hm1 hm2
    lappend x m3:start
    lappend x m3:[catch {testasync mark $hm2 serial2 0} msg] $msg
    lappend x m3:[catch {testasync mark $hm1 serial1 0} msg] $msg
    lappend x m3:end
    return -code 11 mult3
}
if {[testConstraint testasync]} {
    set hm1 [testasync create mult1]
    set hm2 [testasync create mult2]
    set hm3 [testasync create mult3]
}
test async-2.1 {multiple handlers} testasync {
    set x {}
    list [catch {testasync mark $hm3 "foobar" 5} msg] $msg $x
} {7 mult1 {m3:start m3:0 serial2 m3:0 serial1 m3:end m2:mult2 m1:mult1}}

proc del1 {result code} {
    global x hm1 hm2 hm3 hm4
    lappend x [catch {testasync mark $hm3 serial2 0}]
    lappend x [catch {testasync mark $hm1 serial1 0}]
    lappend x [catch {testasync mark $hm4 serial1 0}]
    testasync delete $hm1
    testasync delete $hm2
    testasync delete $hm3
    lappend x del1
    return -code 13 del1
}
proc del2 {result code} {
    global x
    lappend x del2
    return -code 3 del2
}
if {[testConstraint testasync]} {
    testasync delete $handler1
    testasync delete $hm2
    testasync delete $hm3
    set hm2 [testasync create del1]
    set hm3 [testasync create mult2]
    set hm4 [testasync create del2]
}

test async-3.1 {deleting handlers} testasync {
    set x {}
    list [catch {testasync mark $hm2 "foobar" 5} msg] $msg $x
} {3 del2 {0 0 0 del1 del2}}

test async-4.1 {async interrupting bytecode sequence} -constraints {
    testasync threaded
} -setup {
    set hm [testasync create async3]
    proc nothing {} {
	# empty proc
    }
} -body {
    apply {{handle} {
	global aresult
	set aresult {Async event not delivered}
	testasync marklater $handle
	# allow plenty of time to pass in case valgrind is running
	set start [clock milliseconds]
	while {
	    [clock milliseconds] - $start < 10000 && $aresult eq "Async event not delivered"
	} {
	    # be less busy
	    after 10
	    nothing
	}
	return $aresult
    }} $hm
} -result {test pattern} -cleanup {
    wait_4_valgrind
    testasync delete $hm
}
test async-4.2 {async interrupting straight bytecode sequence} -constraints {
    testasync threaded
} -setup {
    set hm [testasync create async3]
} -body {
    apply {{handle} {
	global aresult
	set aresult {Async event not delivered}
	testasync marklater $handle
	# allow plenty of time to pass in case valgrind is running
	set start [clock milliseconds]
	while {
	    [clock milliseconds] - $start < 10000 && $aresult eq "Async event not delivered"
	} {
	    # be less busy
	    after 10
	}
	return $aresult
    }} $hm
} -result {test pattern} -cleanup {
    wait_4_valgrind
    testasync delete $hm
}

if {[namespace which -command async_4_awaittest] eq ""} {
proc async_4_awaittest {handle} [concat {
    upvar ::aresult i
    set i 0
    # generate a serie to notify tcl-thread about async worker is there 
    # and to be sure we entering loop-less bytecode sequence (and event
    # generated during the TEBC evaluation):
    testasync marklater {*}[lrepeat 10 $handle]
    # wait for worker gets started (any of first 9 from serie above):
    if {$::aresult == 0} { vwait ::aresult }
    # enter loop-less block (of incr's):
    incr i
} "[string repeat {;incr i} 1500000];" {
    return $i
}]
}
test async-4.3 {async interrupting loop-less bytecode sequence} -constraints {
    testasync threaded
} -setup {
    set ev [after 10000 {set ::aresult "timeout"}]
    set hm [testasync create {apply {{result code} {
	global aresult
	if {[info exists aresult] && [string is integer -strict $aresult] && [incr aresult] < 10} {
	    # touch only ("wait" for increment block entering)
	} else {
	    # signal stop: this should produce an (expected) error in some of [incr i] below
	    set aresult "test pattern"
	}
	return -code $code $result
    }}}]
} -body {
    if {[catch {
	async_4_awaittest $hm
    } e opt]} {
	# error "expected integer" (cannot increment) is expected:
	if {![string match "expected integer*" $e] || $aresult ne "test pattern"} {
	     return {*}$opt $e
	}
    }
    set aresult
} -result {test pattern} -cleanup {
    after cancel $ev
    wait_4_valgrind
    testasync delete $hm
}

if {[tcltest::configure -singleproc]} {
    rename async_4_awaittest {}
}

# Following tests covering correct order of async events (FIFO), as precedence
# of marking order over creation order, as well as correct epoch recognition 
# during nested evaluation of Tcl_AsyncInvoke (nested in TEBC/Tcl_DoOneEvent/etc),
# all async events should be definitely processed in same order as they have
# been marked, no idirect nested wait in async-events is and should be possible).

set async_5_test(test) {-constraints {
    testasync threaded
} -setup {
    set ev [after 10000 {set ::aresult "timeout"}]
    set ::aresult {}
    for {set i 0} {$i < 10} {incr i} {
	set hms($i) [testasync create [list apply \
	    [list [list result code [list i $i]] {
		lappend ::aresult $i
		return -code $code $result
	    }]
	]]
    }
} -body {
    global async_5_test
    # mark all events in serie in certain order:
    testasync marklater \
	$hms(5) $hms(4) $hms(3) $hms(2) $hms(1) \
	$hms(0) $hms(6) $hms(7) $hms(8) $hms(9)
    # short pause should force worker mark all events at all:
    if {$async_5_test(retardProcess)} {
	after 50; # all events should be marked in 50ms
    }
    # enter processing:
    while {[llength $::aresult] < 10 && "timeout" ni $::aresult} {
	vwait ::aresult
    }
    # all events seems to be processed, check order:
    set ::aresult
} -result {5 4 3 2 1 0 6 7 8 9} -cleanup {
    after cancel $ev
    wait_4_valgrind
    for {set i 0} {$i < 10} {incr i} {
	testasync delete $hms($i)
    }
    unset -nocomplain hms i ::aresult ev
}}

set async_5_test(retardProcess) 0
test async-5.1 {async order of event marks FIFO precedence (during processing)} {*}$async_5_test(test)
set async_5_test(retardProcess) 1
test async-5.2 {async order of event marks FIFO precedence (before processing)} {*}$async_5_test(test)

unset async_5_test

# cleanup
if {[testConstraint testasync]} {
    testasync delete
}
::tcltest::cleanupTests
return

# Local Variables:
# mode: tcl
# End:
