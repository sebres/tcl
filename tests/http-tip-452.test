# Commands covered:  http::config, http::geturl, http::wait, http::reset
#
# This file contains a collection of tests for the http script library.
# Sourcing this file into Tcl runs the tests and generates output for errors.
# No output means no errors were found.
#
# This file is a rewrite to demostrate TIP 452 (enhancement to tcltest for
# stubs/mocks and seams).  NOTE -- due to the use of stubs/mocks, no actual
# I/O is done, so the httpd package is no longer being used. Please also note,
# the seams feature is not used, only the stub/mock feature.
#
# Copyright (c) 1991-1993 The Regents of the University of California.
# Copyright (c) 1994-1996 Sun Microsystems, Inc.
# Copyright (c) 1998-2000 by Ajuba Solutions.
# Copyright (c) 2017 by Gerald W. Lester.
#
# See the file "license.terms" for information on usage and redistribution of
# this file, and for a DISCLAIMER OF ALL WARRANTIES.

package require tcltest 2.5

if {[catch {package require http 2} version]} {
    if {[info exists http2]} {
	catch {puts "Cannot load http 2.* package"}
	return
    } else {
	catch {puts "Running http 2.* tests in slave interp"}
	set interp [interp create http2]
	$interp eval [list set http2 "running"]
	$interp eval [list set argv $argv]
	$interp eval [list source [info script]]
	interp delete $interp
	return
    }
}

proc bgerror {args} {
    global errorInfo
    puts stderr "http.test bgerror"
    puts stderr [join $args]
    puts stderr $errorInfo
}

set bindata "This is binary data\x0d\x0amore\x0dmore\x0amore\x00null"
catch {unset data}

namespace eval ::httpTest:: {

    ##
    ## Test http::config command -- not modified from original tests
    ##
    ::tcltest::test http-1.1 {http::config} {
        http::config -useragent UserAgent
        http::config
    } [list -accept */* -proxyfilter http::ProxyRequired -proxyhost {} -proxyport {} -urlencoding utf-8 -useragent "UserAgent"]
    ::tcltest::test http-1.2 {http::config} {
        http::config -proxyfilter
    } http::ProxyRequired
    ::tcltest::test http-1.3 {http::config} {
        catch {http::config -junk}
    } 1
    ::tcltest::test http-1.4 {http::config} {
        set savedconf [http::config]
        http::config -proxyhost nowhere.come -proxyport 8080 \
            -proxyfilter myFilter -useragent "Tcl Test Suite" \
            -urlencoding iso8859-1
        set x [http::config]
        http::config {*}$savedconf
        set x
    } {-accept */* -proxyfilter myFilter -proxyhost nowhere.come -proxyport 8080 -urlencoding iso8859-1 -useragent {Tcl Test Suite}}
    ::tcltest::test http-1.5 {http::config} -returnCodes error -body {
        http::config -proxyhost {} -junk 8080
    } -result {Unknown option -junk, must be: -accept, -proxyfilter, -proxyhost, -proxyport, -urlencoding, -useragent}
    ::tcltest::test http-1.6 {http::config} -setup {
        set oldenc [http::config -urlencoding]
    } -body {
        set enc [list [http::config -urlencoding]]
        http::config -urlencoding iso8859-1
        lappend enc [http::config -urlencoding]
    } -cleanup {
        http::config -urlencoding $oldenc
    } -result {utf-8 iso8859-1}


    ##
    ## Test http::geturl
    ##

    ##
    ## Happy path, no options
    ##
    ::tcltest::test http-2.1 {http::geturl -- Happy path, no options} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::geturl {http://test.it/some/fragment}} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 ::http::1 {::after,count 0 ::fileevent,count 1 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 1 ::socket,count 1}}

    ##
    ## Happy path, with all options except:
    ##      -channel, -command, -keepalive and -querychannel
    ##
    ::tcltest::test http-2.2 {http::geturl with options} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {
                ::http::geturl {http://test.it/some/fragment} \
                    -binary false \
                    -blocksize 1024 \
                    -handler SomeHandler \
                    -headers {CustomHeader true CustomState no} \
                    -method POST \
                    -myaddr 1024:45 \
                    -progress ProgressBar \
                    -protocol 1.2 \
                    -query SomeQuery \
                    -queryblocksize 2020 \
                    -queryprogress QueryProgressBar \
                    -strict yes \
                    -timeout 1000 \
                    -type xml \
                    -validate true
            } token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 ::http::1 {::after,count 1 ::fileevent,count 1 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 1 ::socket,count 1}}

    ##
    ## Bad options
    ##
    ::tcltest::test http-2.3 {http::geturl} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {
                ::http::geturl {http://test.it/some/fragment} \
                    -oops
            } token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {1 {Unknown option -oops, can be: -binary, -blocksize, -channel, -command, -handler, -headers, -keepalive, -method, -myaddr, -progress, -protocol, -query, -queryblocksize, -querychannel, -queryprogress, -strict, -timeout, -type, -validate} {::after,count 0 ::fileevent,count 0 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 0 ::socket,count 0}}

    ##
    ## Good options, but invalid numeric value
    ##
    ::tcltest::test http-2.4a {http::geturl - Good options, but invalid numeric value for -blocksize} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {
                ::http::geturl {http://test.it/some/fragment} \
                    -binary false \
                    -blocksize QED \
                    -handler SomeHandler \
                    -headers {CustomHeader true CustomState no} \
                    -method POST \
                    -myaddr 1024:45 \
                    -progress ProgressBar \
                    -protocol 1.2 \
                    -query SomeQuery \
                    -queryblocksize 2020 \
                    -queryprogress QueryProgressBar \
                    -strict yes \
                    -timeout 1000 \
                    -type xml \
                    -validate true
            } token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {1 {Bad value for -blocksize (QED), must be integer} {::after,count 0 ::fileevent,count 0 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 0 ::socket,count 0}}

    ::tcltest::test http-2.4b {http::geturl - Good options, but invalid numeric value for -queryblocksize} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {
                ::http::geturl {http://test.it/some/fragment} \
                    -binary false \
                    -blocksize 1024 \
                    -handler SomeHandler \
                    -headers {CustomHeader true CustomState no} \
                    -method POST \
                    -myaddr 1024:45 \
                    -progress ProgressBar \
                    -protocol 1.2 \
                    -query SomeQuery \
                    -queryblocksize QED \
                    -queryprogress QueryProgressBar \
                    -strict yes \
                    -timeout 1000 \
                    -type xml \
                    -validate true
            } token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {1 {Bad value for -queryblocksize (QED), must be integer} {::after,count 0 ::fileevent,count 0 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 0 ::socket,count 0}}

    ::tcltest::test http-2.4c {http::geturl - Good options, but invalid numeric value for -timeout} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {
                ::http::geturl {http://test.it/some/fragment} \
                    -binary false \
                    -blocksize 1024 \
                    -handler SomeHandler \
                    -headers {CustomHeader true CustomState no} \
                    -method POST \
                    -myaddr 1024:45 \
                    -progress ProgressBar \
                    -protocol 1.2 \
                    -query SomeQuery \
                    -queryblocksize 1024 \
                    -queryprogress QueryProgressBar \
                    -strict yes \
                    -timeout QED \
                    -type xml \
                    -validate true
            } token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {1 {Bad value for -timeout (QED), must be integer} {::after,count 0 ::fileevent,count 0 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 0 ::socket,count 0}}

    ##
    ## Invalid use of -query and -querychannel options
    ##
    ::tcltest::test http-2.5 {http::geturl -- Invalid use of -query and -querychannel options} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {
                ::http::geturl {http://test.it/some/fragment} \
                    -query SomeQuery \
                    -querychannel 10000
            } token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {1 {Can't combine -query and -querychannel options!} {::after,count 0 ::fileevent,count 0 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 0 ::socket,count 0}}

    ##
    ## Unsupported URL
    ##
    ::tcltest::test http-2.5 {http::geturl -- Unsupported URL} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {
                ::http::geturl {bad/url/me.test}} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {1 {Unsupported URL: bad/url/me.test} {::after,count 0 ::fileevent,count 0 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 0 ::socket,count 0}}

    ##
    ## Missing host
    ##
    ::tcltest::test http-2.7 {http::geturl -- Missing host} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {
                ::http::geturl {http://:20/some/fragment}} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {1 {Missing host part: http://:20/some/fragment} {::after,count 0 ::fileevent,count 0 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 0 ::socket,count 0}}

    ##
    ## Invalid port number
    ##
    ::tcltest::test http-2.8 {http::geturl - Invalid port number} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {
                ::http::geturl {http://test.it:99999999/some/fragment}} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {1 {Invalid port number: 99999999} {::after,count 0 ::fileevent,count 0 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 0 ::socket,count 0}}

    ##
    ## Illegal encoding character usage in URL user
    ##
    ::tcltest::test http-2.9 {http::geturl - Illegal encoding character usage in URL user} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {
                ::http::geturl {http://%@test.it/some/fragment} -strict yes} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {1 {Illegal encoding character usage "%" in URL user} {::after,count 0 ::fileevent,count 0 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 0 ::socket,count 0}}

    ##
    ## Illegal characters in URL user
    ##
    ::tcltest::test http-2.10 {http::geturl -- Illegal characters in URL user} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {
                ::http::geturl {http://{ME}@test.it/some/fragment}} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {1 {Illegal characters in URL user} {::after,count 0 ::fileevent,count 0 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 0 ::socket,count 0}}

    ##
    ## Path of URL is empty
    ##
    ::tcltest::test http-2.11 {http::geturl -- Path of URL is empty} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {
                ::http::geturl {http://test.it}} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 ::http::1 {::after,count 0 ::fileevent,count 1 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 1 ::socket,count 1}}

    ##
    ## Illegal encoding character usage in URL path
    ##
    ::tcltest::test http-2.12 {http::geturl -- Illegal encoding character usage in URL path} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::geturl {http://foo.bar/test%--}} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {1 {Illegal encoding character usage "%--" in URL path} {::after,count 0 ::fileevent,count 0 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 0 ::socket,count 0}}

    ##
    ## Illegal characters in URL path
    ##
    ::tcltest::test http-2.13 {http::geturl - Illegal characters in URL path} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::geturl {http://test.it/{}}} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {1 {Illegal characters in URL path} {::after,count 0 ::fileevent,count 0 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 0 ::socket,count 0}}

    ##
    ## Protocol missing
    ##
    ::tcltest::test http-2.14 {http::geturl - Protocol missing} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::geturl {//test.it/}} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 ::http::1 {::after,count 0 ::fileevent,count 1 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 1 ::socket,count 1}}

    ##
    ## Unsupported URL type
    ##
    ::tcltest::test http-2.15 {http::geturl -- Unsupported URL type} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::geturl {://test.it/}} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {1 {Unsupported URL: ://test.it/} {::after,count 0 ::fileevent,count 0 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 0 ::socket,count 0}}

    ##
    ## Port missing
    ##
    ::tcltest::test http-2.16 {http::geturl -- Port missing} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::geturl {http://test.it:/}} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {1 {Missing host part: http://test.it:/} {::after,count 0 ::fileevent,count 0 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 0 ::socket,count 0}}

    ##
    ## Proxy Filter specified
    ##
    ::tcltest::test http-2.17 {http::geturl -- Proxy Filter specified} \
        -setup {
            set ::http::http(uid) {0}
            set ::http::http(-proxyfilter) {proxy.it 1028}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            ::http::config -proxyhost proxy.com -proxyport 1024
            set status [catch {::http::geturl {http://test.it/}} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 ::http::1 {::after,count 0 ::fileevent,count 1 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 1 ::socket,count 1}}

    ##
    ## Non-empty valid user
    ##
    ::tcltest::test http-2.18 {http::geturl -- Non-empty valid user} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::geturl {http://jdoe@test.it/}} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 ::http::1 {::after,count 0 ::fileevent,count 1 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 1 ::socket,count 1}}

    ##
    ## Non default port specified
    ##
    ::tcltest::test http-2.19 {http::geturl - Non default port specified} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::geturl {http://test.it:8080/}} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 ::http::1 {::after,count 0 ::fileevent,count 1 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 1 ::socket,count 1}}

    ##
    ## Timeout specified
    ##
    ::tcltest::test http-2.20 {http::geturl -- Timeout specified} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::geturl {http://test.it/} -timeout 10} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 ::http::1 {::after,count 1 ::fileevent,count 1 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 1 ::socket,count 1}}

    ##
    ## Keep alive on closed channel
    ##
    ::tcltest::test http-2.21 {http::geturl -- Keep alive on closed channel} \
        -setup {
            set ::http::http(uid) {0}
            set ::http::defaultKeepalive true
            set http::socketmap(test.it:80) yes
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::fconfigure {
                    * {
                        returns {Socket Closed}
                        code {error}
                        errorcode {HTTP TEST SOCKCLS}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::geturl {http://test.it/} -keepalive yes} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 ::http::1 {::after,count 0 ::fconfigure,count 1 ::fileevent,count 1 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 1 ::socket,count 1}}

    ##
    ## Keep alive on open channel
    ##
    ::tcltest::test http-2.22 {http::geturl -- Keep alive on open channel} \
        -setup {
            set ::http::http(uid) {0}
            set ::http::defaultKeepalive true
            set http::socketmap(test.it:80) yes
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::fconfigure {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::geturl {http://test.it/} -keepalive yes} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 ::http::1 {::after,count 0 ::fconfigure,count 1 ::fileevent,count 3 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 1 ::socket,count 0}}

    ##
    ## Keep alive on new channel
    ##
    ::tcltest::test http-2.23 {http::geturl -- Keep alive on new channel} \
        -setup {
            set ::http::http(uid) {0}
            set ::http::defaultKeepalive true
            unset -nocomplain http::socketmap
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::geturl {http://test.it/} -keepalive yes} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 ::http::1 {::after,count 0 ::fileevent,count 1 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 1 ::socket,count 1}}


    ##
    ## New socket with -myaddr specified
    ##
    ::tcltest::test http-2.24 {http::geturl -- New socket with -myaddr specified} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::geturl {http://test.it/} -myaddr Interface1} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 ::http::1 {::after,count 0 ::fileevent,count 1 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 1 ::socket,count 1}}

    ##
    ## Error when opening the connection
    ##
    ::tcltest::test http-2.25 {http::geturl -- Error when opening the connection} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {Failed Socket Open}
                        errorcode {HTTP TEST SOCKERR}
                        code {error}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::geturl {http://test.it/} -myaddr Interface1} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {1 {Failed Socket Open} {::after,count 0 ::fileevent,count 0 ::http::cleanup,count 1 ::http::Finish,count 1 ::http::reset,count 1 ::http::wait,count 0 ::socket,count 1}}

    ##
    ## Synchronus connection with timeout
    ##
    ::tcltest::test http-2.26 {http::geturl -- Synchronus connection with timeout} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                        use {
                            prefix {unset}
                        }
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::geturl {http://test.it/}} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 ::http::1 {::after,count 0 ::fileevent,count 1 ::http::cleanup,count 0 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 1 ::socket,count 1}}

    ##
    ## Synchronus connection with error
    ##
    ::tcltest::test http-2.27 {http::geturl -- Synchronus connection with error} \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::after {
                    * {
                        returns {test::afterId}
                        errorcode {}
                    }
                }
                ::socket {
                    * {
                        returns {TestSocket}
                        errorcode {}
                    }
                }
                ::http::reset {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::wait {
                    * {
                        returns {}
                        errorcode {}
                        set {
                            ::http::1 A {status error error TestError}
                        }
                    }
                }
                ::http::cleanup {
                    * {
                        returns {}
                        errorcode {}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::geturl {http://test.it/}} token]
            list $status $token [::tcltest::callCount]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {1 TestError {::after,count 0 ::fileevent,count 1 ::http::cleanup,count 1 ::http::Finish,count 0 ::http::reset,count 1 ::http::wait,count 1 ::socket,count 1}}



    ##
    ## Test http::formatQuery
    ##
    ::tcltest::test http-3.1 {http::formatQuery -- no arguments}  \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::http::mapReply {
                    * {
                        use {
                            prefix {return}
                        }
                        code {ok}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::formatQuery} result]
            list $status $result
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 {}}

    ::tcltest::test http-3.2 {http::formatQuery -- one set arguments}  \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::http::mapReply {
                    * {
                        use {
                            prefix {return}
                        }
                        code {ok}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::formatQuery arg1 val1} result]
            list $status $result
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 arg1=val1}

    ::tcltest::test http-3.3 {http::formatQuery -- two set arguments}  \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::http::mapReply {
                    * {
                        use {
                            prefix {return}
                        }
                        code {ok}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::formatQuery arg1 val1 arg2 val2} result]
            list $status $result
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 arg1=val1&arg2=val2}

    ::tcltest::test http-3.4 {http::formatQuery -- odd set arguments (Ticket: 4e5007ea1b2855277b349964ef1512ad884edace (6970))}  \
        -setup {
            set ::http::http(uid) {0}
            ::tcltest::testSetup {
                ::http::mapReply {
                    * {
                        use {
                            prefix {return}
                        }
                        code {ok}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::formatQuery arg1 val1 arg2} result]
            list $status $result
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {1 {Incorrect number of arguments, must be an even number.}}


    ##
    ## Test http::reset
    ##

    ##
    ## Happy path
    ##
    ::tcltest::test http-4.1 {http::reset} \
        -setup {
            set ::http::http(uid) {0}
            array set ::http_1 {
                sock none
            }
            unset -nocomplain ::http_1(error)
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {Test error}
                        code {error}
                        errorcode {HTTP TEST RESET FILEEVENT}
                    }
                }
                ::http::Finish {
                    * {
                        returns {No Error}
                        errorcode {}
                        set {
                            ::http_1 A {
                                status {---}
                            }
                        }
                    }
                }
            }
        } \
        -body {
            list [catch {::http::reset ::http_1}] [info exists ::http_1] [::tcltest::callCount]
        } \
        -result {0 1 {::fileevent,count 2 ::http::Finish,count 1}} \
        -cleanup {
            ::tcltest::testCleanup
        }

    ##
    ## Test error
    #
    ::tcltest::test http-4.2 {http::rest} \
        -setup {
            set ::http::http(uid) {0}
            array set ::http_1 {
                sock none
            }
            unset -nocomplain ::http_1(error)
            ::tcltest::testSetup {
                ::fileevent {
                    * {
                        returns {Test error}
                        code {error}
                        errorcode {HTTP TEST RESET FILEEVENT}
                    }
                }
                ::http::Finish {
                    * {
                        returns {No Error}
                        errorcode {}
                        set {
                            ::http_1 A {
                                status {---}
                                error {{HTTP TEST ERROR}}
                            }
                        }
                    }
                }
            }
        } \
        -body {
            list [catch {::http::reset ::http_1} result] [info exists ::http_1] [::tcltest::callCount] $result
        } \
        -result {1 0 {::fileevent,count 2 ::http::Finish,count 1} {HTTP TEST ERROR}} \
        -cleanup {
            ::tcltest::testCleanup
        }


    ##
    ## Test http::wait
    ##
    ::tcltest::test http-5.1 {http::wait -- status array index does not exists} \
        -setup {
            set ::http::http(uid) {0}
            array set ::httpTest::TestStatus {
                index value
            }
            ::tcltest::testSetup {
                ::vwait {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::http::status {
                    * {
                        returns {TestPassed}
                        errorcode {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::wait ::httpTest::TestStatus} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestStatus
            ::tcltest::testCleanup
        } \
        -result {0 TestPassed}

    ::tcltest::test http-5.2 {http::wait -- status currently a space} \
        -setup {
            set ::http::http(uid) {0}
            array set ::httpTest::TestStatus {
                status {}
            }
            ::tcltest::testSetup {
                ::vwait {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::http::status {
                    * {
                        returns {TestPassed}
                        errorcode {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::wait ::httpTest::TestStatus} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestStatus
            ::tcltest::testCleanup
        } \
        -result {0 TestPassed}

    ::tcltest::test http-5.3 {http::wait -- status array index exists and is not a space} \
        -setup {
            set ::http::http(uid) {0}
            array set ::httpTest::TestStatus {
                status someValue
            }
            ::tcltest::testSetup {
                ::vwait {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::http::status {
                    * {
                        returns {TestPassed}
                        errorcode {}
                    }
                }
            }
        } \
        -body {
            set status [catch {::http::wait ::httpTest::TestStatus} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestStatus
            ::tcltest::testCleanup
        } \
        -result {0 TestPassed}


    ##
    ## Testhttp::data
    ##
    ::tcltest::test http-6.1 {http::data -- happy path} \
        -setup {
            array set ::httpTest::TestToken {
                body {Some String}
                status {Some Status}
                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::data ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {Some String}}

    ::tcltest::test http-6.2 {http::data -- not an array} \
        -setup {
            set ::httpTest::TestToken {
                body {Some String}
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::data ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {1 {can't read "state(body)": variable isn't array}}

    ::tcltest::test http-6.3 {http::data -- no data returned} \
        -setup {
            array set ::httpTest::TestToken {
                body {}
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::data ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {}}

    ::tcltest::test http-6.4 {http::data -- data index does not exists} \
        -setup {
            array set ::httpTest::TestToken {
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::data ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {1 {can't read "state(body)": no such element in array}}


    ##
    ## Test http::error
    ##
    ::tcltest::test http-7.1 {http::error -- happy path} \
        -setup {
            array set ::httpTest::TestToken {
                body {Some String}
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::error ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {Some Error}}

    ::tcltest::test http-7.2 {http::error -- not an array} \
        -setup {
            set ::httpTest::TestToken {
                body {Some String}
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::error ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {}}

    ::tcltest::test http-7.3 {http::error -- no error returned} \
        -setup {
            array set ::httpTest::TestToken {
                body {Some Data}
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {}
            }
        } \
        -body {
            set status [catch {::http::error ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {}}

    ::tcltest::test http-7.4 {http::error -- error index does not exists} \
        -setup {
            array set ::httpTest::TestToken {
                body {Some Data}
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
            }
        } \
        -body {
            set status [catch {::http::error ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {}}

    ##
    ## Test http::status
    ##
    ::tcltest::test http-8.1 {http::status -- happy path} \
        -setup {
            array set ::httpTest::TestToken {
                body {Some String}
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::status ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {Some Status}}

    ::tcltest::test http-8.2 {http::status -- not an array} \
        -setup {
            set ::httpTest::TestToken {
                body {Some String}
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::status ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {1 {can't read "state(status)": variable isn't array}}

    ::tcltest::test http-8.3 {http::status -- no status returned} \
        -setup {
            array set ::httpTest::TestToken {
                body {Some Data}
                status {}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::status ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {}}

    ::tcltest::test http-8.4 {http::status -- status index does not exists} \
        -setup {
            array set ::httpTest::TestToken {
                body {Some Data}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::status ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {1 {can't read "state(status)": no such element in array}}

    ::tcltest::test http-8.5 {http::status -- token does not exists} \
        -setup {
        } \
        -body {
            set status [catch {::http::status ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 error}

    ##
    ## Test http::code
    ##
    ::tcltest::test http-9.1 {http::code -- happy path} \
        -setup {
            array set ::httpTest::TestToken {
                body {Some String}
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::code ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {HTTP/1.1 200 OK}}

    ::tcltest::test http-9.2 {http::code -- not an array} \
        -setup {
            set ::httpTest::TestToken {
                body {Some String}
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::code ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {1 {can't read "state(http)": variable isn't array}}

    ::tcltest::test http-9.3 {http::code -- no code returned} \
        -setup {
            array set ::httpTest::TestToken {
                body {Some Data}
                status {Some Status}
                code {}
                http {}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::code ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {}}

    ::tcltest::test http-9.4 {http::code -- code index does not exists} \
        -setup {
            array set ::httpTest::TestToken {
                status {Some Status}
                body {Some Data}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::code ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {1 {can't read "state(http)": no such element in array}}

    ##
    ## Test http::ncode
    ##
    ::tcltest::test http-10.1 {http::ncode -- happy path} \
        -setup {
            array set ::httpTest::TestToken {
                body {Some String}
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::ncode ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 200}

    ::tcltest::test http-10.2 {http::ncode -- not an array} \
        -setup {
            set ::httpTest::TestToken {
                body {Some String}
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::ncode ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {1 {can't read "state(http)": variable isn't array}}

    ::tcltest::test http-10.3 {http::ncode -- no ncode returned} \
        -setup {
            array set ::httpTest::TestToken {
                body {Some Data}
                status {Some Status}

                http {}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::ncode ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {}}

    ::tcltest::test http-10.4 {http::ncode -- ncode index does not exists} \
        -setup {
            array set ::httpTest::TestToken {
                status {Some Status}

                body {Some Data}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::ncode ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {1 {can't read "state(http)": no such element in array}}

    ##
    ## Test http::size
    ##
    ::tcltest::test http-11.1 {http::size -- happy path} \
        -setup {
            array set ::httpTest::TestToken {
                body {Some String}
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::size ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 69}

    ::tcltest::test http-11.2 {http::size -- not an array} \
        -setup {
            set ::httpTest::TestToken {
                body {Some String}
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::size ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {1 {can't read "state(currentsize)": variable isn't array}}

    ::tcltest::test http-11.3 {http::size -- no size returned} \
        -setup {
            array set ::httpTest::TestToken {
                body {Some Data}
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::size ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {}}

    ::tcltest::test http-11.4 {http::size -- currentsize index does not exists} \
        -setup {
            array set ::httpTest::TestToken {
                status {Some Status}

                http {HTTP/1.1 200 OK}
                body {Some Data}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::size ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {1 {can't read "state(currentsize)": no such element in array}}

    ##
    ## Test http::meta
    ##
    ::tcltest::test http-12.1 {http::meta -- happy path} \
        -setup {
            array set ::httpTest::TestToken {
                body {Some String}
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::meta ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {Some Meta Data}}

    ::tcltest::test http-12.2 {http::meta -- not an array} \
        -setup {
            set ::httpTest::TestToken {
                body {Some String}
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {Some Meta Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::meta ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {1 {can't read "state(meta)": variable isn't array}}

    ::tcltest::test http-12.3 {http::meta -- no metadata returned} \
        -setup {
            array set ::httpTest::TestToken {
                body {}
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                meta {}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::meta ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {}}

    ::tcltest::test http-12.4 {http::meta -- meta index does not exists} \
        -setup {
            array set ::httpTest::TestToken {
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                body {Some Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::meta ::httpTest::TestToken} results]
            list $status $results
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {1 {can't read "state(meta)": no such element in array}}

    ##
    ## Test http::cleanup
    ##
    ::tcltest::test http-13.1 {http::cleanup -- token exists} \
        -setup {
            array set ::httpTest::TestToken {
                status {Some Status}

                http {HTTP/1.1 200 OK}
                currentsize {69}
                body {Some Data}
                error {Some Error}
            }
        } \
        -body {
            set status [catch {::http::cleanup ::httpTest::TestToken} results]
            list $status $results [info exists ::httpTest::TestToken]
        } \
        -cleanup {
            unset -nocomplain ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {} 0}

    ::tcltest::test http-13.2 {http::cleanup -- token does not exist} \
        -setup {
        } \
        -body {
            set status [catch {::http::cleanup ::httpTest::TestToken} results]
            list $status $results [info exists ::httpTest::TestToken]
        } \
        -cleanup {
            unset -nocomplain ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {} 0}


    ##
    ## Test http::register
    ##
    ::tcltest::test http-15.1 {http::register -- new registration} \
        -setup {
            ::tcltest::saveVars {::http::urlTypes}
            unset -nocomplain ::http::urlTypes
        } \
        -body {
            set status [catch {http::register test 8080 TestCmd} results]
            list $status $results [info exists ::http::urlTypes(test)]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 {8080 TestCmd} 1}

    ::tcltest::test http-15.2 {http::register -- existing registration} \
        -setup {
            ::tcltest::saveVars {::http::urlTypes}
            set ::http::urlTypes(test) {BAD RESULTS}
        } \
        -body {
            set status [catch {http::register test 8080 TestCmd} results]
            list $status $results [info exists ::http::urlTypes(test)]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 {8080 TestCmd} 1}

    ::tcltest::test http-15.3 {http::register -- existing registration different case} \
        -setup {
            ::tcltest::saveVars {::http::urlTypes}
            set ::http::urlTypes(test) {BAD RESULTS}
        } \
        -body {
            set status [catch {http::register TEST 8080 TestCmd} results]
            list $status $results [info exists ::http::urlTypes(test)]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 {8080 TestCmd} 1}


    ##
    ## Test http::unregister
    ##
    ::tcltest::test http-16.1 {http::unregister - protocol already registered} \
        -setup {
            ::tcltest::saveVars {::http::urlTypes}
            set ::http::urlTypes(test) {8080 TestCmd}
        } \
        -body {
            set status [catch {http::unregister test} results]
            list $status $results [info exists ::http::urlTypes(test)]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 {8080 TestCmd} 0}

    ::tcltest::test http-16.2 {http::unregister - protocol already registered with a different case} \
        -setup {
            ::tcltest::saveVars {::http::urlTypes}
            set ::http::urlTypes(test) {8080 TestCmd}
        } \
        -body {
            set status [catch {http::unregister TEST} results]
            list $status $results [info exists ::http::urlTypes(test)]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {0 {8080 TestCmd} 0}

    ::tcltest::test http-16.3 {http::unregister - protocol not registered} \
        -setup {
            ::tcltest::saveVars {::http::urlTypes}
            unset -nocomplain ::http::urlTypes(test)
        } \
        -body {
            set status [catch {http::unregister test} results]
            list $status $results [info exists ::http::urlTypes(test)]
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {1 {unsupported url type "test"} 0}


    ##
    ## Test http::Finish
    ##
    ::tcltest::test http-17.1 {http::Finish -- default all optionals, happy path}  \
        -setup {
            ::tcltest::testSetup {
                ::after {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::http::CloseSocket {
                    * {
                        returns {}
                        code {ok}
                    }
                }
            }
            ##
            ## For some test we will also need -keepalive, connection, after,
            ## -command and done-command-cb
            ##
            array set ::httpTest::TestToken {
                status {ok}
                error {}
                sock {TestSocket}
            }
        } \
        -body {
            set status [catch {http::Finish ::httpTest::TestToken} results]
            list $status $results $::httpTest::TestToken(status) $::httpTest::TestToken(error) [::tcltest::callCount]
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {} ok {} {::after,count 0 ::http::CloseSocket,count 0}}

    ::tcltest::test http-17.2 {http::Finish -- default all optionals, status of timeout}  \
        -setup {
            ::tcltest::testSetup {
                ::after {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::http::CloseSocket {
                    * {
                        returns {}
                        code {ok}
                    }
                }
            }
            ##
            ## For some test we will also need -keepalive, connection, after,
            ## -command and done-command-cb
            ##
            array set ::httpTest::TestToken {
                status {timeout}
                error {}
                sock {TestSocket}
            }
        } \
        -body {
            set status [catch {http::Finish ::httpTest::TestToken} results]
            list $status $results $::httpTest::TestToken(status) $::httpTest::TestToken(error) [::tcltest::callCount]
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {} timeout {} {::after,count 0 ::http::CloseSocket,count 1}}

    ::tcltest::test http-17.3 {http::Finish -- default all optionals, status of error}  \
        -setup {
            ::tcltest::testSetup {
                ::after {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::http::CloseSocket {
                    * {
                        returns {}
                        code {ok}
                    }
                }
            }
            ##
            ## For some test we will also need -keepalive, connection, after,
            ## -command and done-command-cb
            ##
            array set ::httpTest::TestToken {
                status {error}
                error {}
                sock {TestSocket}
            }
        } \
        -body {
            set status [catch {http::Finish ::httpTest::TestToken} results]
            list $status $results $::httpTest::TestToken(status) $::httpTest::TestToken(error) [::tcltest::callCount]
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {} error {} {::after,count 0 ::http::CloseSocket,count 1}}

    ::tcltest::test http-17.4 {http::Finish -- default all optionals, -keepalive is yes}  \
        -setup {
            ::tcltest::testSetup {
                ::after {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::http::CloseSocket {
                    * {
                        returns {}
                        code {ok}
                    }
                }
            }
            ##
            ## For some test we will also need -keepalive, connection, after,
            ## -command and done-command-cb
            ##
            array set ::httpTest::TestToken {
                status {ok}
                error {}
                sock {TestSocket}
                -keepalive yes
            }
        } \
        -body {
            set status [catch {http::Finish ::httpTest::TestToken} results]
            list $status $results $::httpTest::TestToken(status) $::httpTest::TestToken(error) [::tcltest::callCount]
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {} ok {} {::after,count 0 ::http::CloseSocket,count 0}}

    ::tcltest::test http-17.5 {http::Finish -- default all optionals, -keepalive is no}  \
        -setup {
            ::tcltest::testSetup {
                ::after {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::http::CloseSocket {
                    * {
                        returns {}
                        code {ok}
                    }
                }
            }
            ##
            ## For some test we will also need -keepalive, connection, after,
            ## -command and done-command-cb
            ##
            array set ::httpTest::TestToken {
                status {ok}
                error {}
                sock {TestSocket}
                -keepalive no
            }
        } \
        -body {
            set status [catch {http::Finish ::httpTest::TestToken} results]
            list $status $results $::httpTest::TestToken(status) $::httpTest::TestToken(error) [::tcltest::callCount]
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {} ok {} {::after,count 0 ::http::CloseSocket,count 1}}

    ::tcltest::test http-17.6 {http::Finish -- default all optionals, connection is close}  \
        -setup {
            ::tcltest::testSetup {
                ::after {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::http::CloseSocket {
                    * {
                        returns {}
                        code {ok}
                    }
                }
            }
            ##
            ## For some test we will also need -keepalive, connection, after,
            ## -command and done-command-cb
            ##
            array set ::httpTest::TestToken {
                status {ok}
                error {}
                sock {TestSocket}
                connection close
            }
        } \
        -body {
            set status [catch {http::Finish ::httpTest::TestToken} results]
            list $status $results $::httpTest::TestToken(status) $::httpTest::TestToken(error) [::tcltest::callCount]
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {} ok {} {::after,count 0 ::http::CloseSocket,count 1}}

    ::tcltest::test http-17.7 {http::Finish -- default all optionals, connection is no}  \
        -setup {
            ::tcltest::testSetup {
                ::after {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::http::CloseSocket {
                    * {
                        returns {}
                        code {ok}
                    }
                }
            }
            ##
            ## For some test we will also need -keepalive, connection, after,
            ## -command and done-command-cb
            ##
            array set ::httpTest::TestToken {
                status {ok}
                error {}
                sock {TestSocket}
                connection no
            }
        } \
        -body {
            set status [catch {http::Finish ::httpTest::TestToken} results]
            list $status $results $::httpTest::TestToken(status) $::httpTest::TestToken(error) [::tcltest::callCount]
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {} ok {} {::after,count 0 ::http::CloseSocket,count 0}}

    ::tcltest::test http-17.8 {http::Finish -- default all optionals, -command is set, no error}  \
        -setup {
            ::tcltest::testSetup {
                ::after {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::http::CloseSocket {
                    * {
                        returns {}
                        code {ok}
                    }
                }
            }
            ##
            ## For some test we will also need -keepalive, connection, after,
            ## -command and done-command-cb
            ##
            array set ::httpTest::TestToken {
                status {ok}
                error {}
                sock {TestSocket}
                -command list
            }
        } \
        -body {
            set status [catch {http::Finish ::httpTest::TestToken} results]
            list $status $results $::httpTest::TestToken(status) $::httpTest::TestToken(error) [::tcltest::callCount]
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {} ok {} {::after,count 0 ::http::CloseSocket,count 0}}

    proc ::httpTest::GenerateError {args} {
        return
    }

    ::tcltest::test http-17.9 {http::Finish -- default all optionals, -command is set, with error}  \
        -setup {
            ::tcltest::testSetup {
                ::after {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::http::CloseSocket {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::httpTest::GenerateError {
                    * {
                        returns {Generated Error}
                        code {error}
                        errorcode {HTTP FINISH ERROR}
                    }
                }
            }
            ##
            ## For some test we will also need -keepalive, connection, after,
            ## -command and done-command-cb
            ##
            array set ::httpTest::TestToken {
                status {ok}
                error {}
                sock {TestSocket}
                -command ::httpTest::GenerateError
            }
        } \
        -body {
            set status [catch {http::Finish ::httpTest::TestToken} results]
            list $status $results $::httpTest::TestToken(status) $::httpTest::TestToken(error) [::tcltest::callCount]
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 error error {{Generated Error} {Generated Error
    while executing
"::httpTest::GenerateError $token"
    ("eval" body line 1)
    invoked from within
"eval $state(-command) {$token}"} {HTTP FINISH ERROR}} {::after,count 0 ::http::CloseSocket,count 0 ::httpTest::GenerateError,count 1}}

    ::tcltest::test http-17.10 {http::Finish -- default all optionals, -command is set, with already invoked}  \
        -setup {
            ::tcltest::testSetup {
                ::after {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::http::CloseSocket {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::httpTest::GenerateError {
                    * {
                        returns {Generated Error}
                        code {error}
                        errorcode {HTTP FINISH ERROR}
                    }
                }
            }
            ##
            ## For some test we will also need -keepalive, connection, after,
            ## -command and done-command-cb
            ##
            array set ::httpTest::TestToken {
                status {ok}
                error {}
                sock {TestSocket}
                -command ::httpTest::GenerateError
                done-command-cb yes
            }
        } \
        -body {
            set status [catch {http::Finish ::httpTest::TestToken} results]
            list $status $results $::httpTest::TestToken(status) $::httpTest::TestToken(error) [::tcltest::callCount]
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {} ok {} {::after,count 0 ::http::CloseSocket,count 0 ::httpTest::GenerateError,count 0}}

    ::tcltest::test http-17.11 {http::Finish -- skipCB set, -command is set}  \
        -setup {
            ::tcltest::testSetup {
                ::after {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::http::CloseSocket {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::httpTest::GenerateError {
                    * {
                        returns {Generated Error}
                        code {error}
                        errorcode {HTTP FINISH ERROR}
                    }
                }
            }
            ##
            ## For some test we will also need -keepalive, connection, after,
            ## -command and done-command-cb
            ##
            array set ::httpTest::TestToken {
                status {ok}
                error {}
                sock {TestSocket}
                -command ::httpTest::GenerateError
                done-command-cb yes
            }
        } \
        -body {
            set status [catch {http::Finish ::httpTest::TestToken {} yes} results]
            list $status $results $::httpTest::TestToken(status) $::httpTest::TestToken(error) [::tcltest::callCount]
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {} ok {} {::after,count 0 ::http::CloseSocket,count 0 ::httpTest::GenerateError,count 0}}

    ::tcltest::test http-17.11 {http::Finish -- errormessage set}  \
        -setup {
            ::tcltest::testSetup {
                ::after {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::http::CloseSocket {
                    * {
                        returns {}
                        code {ok}
                    }
                }
            }
            ##
            ## For some test we will also need -keepalive, connection, after,
            ## -command and done-command-cb
            ##
            array set ::httpTest::TestToken {
                status {ok}
                error {}
                sock {TestSocket}
            }
        } \
        -body {
            set ::errorCode {HTTP FINISH TEST}
            set ::errorInfo {This is a trace list}
            set status [catch {http::Finish ::httpTest::TestToken {Finish Error Message}} results]
            list $status $results $::httpTest::TestToken(status) $::httpTest::TestToken(error) [::tcltest::callCount]
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {} error {{Finish Error Message} {This is a trace list} {HTTP FINISH TEST}} {::after,count 0 ::http::CloseSocket,count 1}}

    ##
    ## Test http::Connect
    ##
    ::tcltest::test http-18.1 {http::Connect -- happy path}  \
        -setup {
            ::tcltest::testSetup {
                ::eof {
                    * {
                        returns {no}
                        code {ok}
                        errorcode {}
                    }
                }
                ::fconfigure {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::http::Connected {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                        code {ok}
                    }
                }
            }
            array set ::httpTest::TestToken {
                sock {TestSocket}
            }
        } \
        -body {
            set status [catch {http::Connect ::httpTest::TestToken proto phost srvurl} results]
            list $status $results [::tcltest::callCount]
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {} {::eof,count 1 ::fconfigure,count 1 ::fileevent,count 1 ::http::Connected,count 1 ::http::Finish,count 0}}

    ::tcltest::test http-18.2 {http::Connect -- eof true}  \
        -setup {
            ::tcltest::testSetup {
                ::eof {
                    * {
                        returns {yes}
                        code {ok}
                        errorcode {}
                    }
                }
                ::fconfigure {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::http::Connected {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                        code {ok}
                    }
                }
            }
            array set ::httpTest::TestToken {
                sock {TestSocket}
            }
        } \
        -body {
            set status [catch {http::Connect ::httpTest::TestToken proto phost srvurl} results]
            list $status $results [::tcltest::callCount]
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {} {::eof,count 1 ::fconfigure,count 0 ::fileevent,count 0 ::http::Connected,count 0 ::http::Finish,count 1}}

    ::tcltest::test http-18.3 {http::Connect -- fconfigure errored}  \
        -setup {
            ::tcltest::testSetup {
                ::eof {
                    * {
                        returns {no}
                        code {ok}
                        errorcode {}
                    }
                }
                ::fconfigure {
                    * {
                        returns {bad socket}
                        code {ok}
                        errorcode {}
                    }
                }
                ::fileevent {
                    * {
                        returns {}
                        code {ok}
                        errorcode {}
                    }
                }
                ::http::Connected {
                    * {
                        returns {}
                        code {ok}
                    }
                }
                ::http::Finish {
                    * {
                        returns {}
                        code {ok}
                    }
                }
            }
            array set ::httpTest::TestToken {
                sock {TestSocket}
            }
        } \
        -body {
            set status [catch {http::Connect ::httpTest::TestToken proto phost srvurl} results]
            list $status $results [::tcltest::callCount]
        } \
        -cleanup {
            unset ::httpTest::TestToken
            ::tcltest::testCleanup
        } \
        -result {0 {} {::eof,count 1 ::fconfigure,count 1 ::fileevent,count 0 ::http::Connected,count 0 ::http::Finish,count 1}}

    ##
    ## Test http::quoteStrings
    ##
    ::tcltest::test http-19.1 {http::quoteString} \
        -setup {
        } \
        -body {
            ::http::quoteString {this is a test}
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {this%20is%20a%20test}

    ##
    ## Test http::Write
    ##
    ::tcltest::test http-20.1 {http::Write} \
        -setup {
        } \
        -body {
            list Test Not Yet Implemented
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {}

    ##
    ## Test http::Event
    ##
    ::tcltest::test http-21.1 {http::Event} \
        -setup {
        } \
        -body {
            list Test Not Yet Implemented
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {}

    ##
    ## Test http::IsBinaryContentType
    ##
    ::tcltest::test http-22.1 {http::IsBinaryContentType -- is not a known text format} \
        -setup {
        } \
        -body {
            http::IsBinaryContentType image/jpeg
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {true}

    ::tcltest::test http-22.2 {http::IsBinaryContentType -- some type of text format} \
        -setup {
        } \
        -body {
            http::IsBinaryContentType text/html
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {false}

    ::tcltest::test http-22.3 {http::IsBinaryContentType -- some type of xml format} \
        -setup {
        } \
        -body {
            http::IsBinaryContentType image/svg+xml
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {false}

    ::tcltest::test http-22.4 {http::IsBinaryContentType -- application XML} \
        -setup {
        } \
        -body {
            http::IsBinaryContentType application/xml
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {false}

    ::tcltest::test http-22.5 {http::IsBinaryContentType -- application parsed XML} \
        -setup {
        } \
        -body {
            http::IsBinaryContentType application/xml-external-parsed-entity
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {false}

    ::tcltest::test http-22.6 {http::IsBinaryContentType -- application XML DTD} \
        -setup {
        } \
        -body {
            http::IsBinaryContentType application/xml-dtd
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {false}


    ##
    ## Test http::CopyStart
    ###
    ::tcltest::test http-23.1 {http::CopyStart} \
        -setup {
        } \
        -body {
            list Test Not Yet Implemented
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {}

    ##
    ## Test http::CopyChunk
    ##
    ::tcltest::test http-24.1 {http::CopyChunk} \
        -setup {
        } \
        -body {
            list Test Not Yet Implemented
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {}

    ##
    ## Test http::CopyDone
    ##
    ::tcltest::test http-25.1 {http::CopyDone} \
        -setup {
        } \
        -body {
            list Test Not Yet Implemented
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {}


    ##
    ## Test http::EOF
    ##
    ::tcltest::test http-26.1 {http::EOF} \
        -setup {
        } \
        -body {
            list Test Not Yet Implemented
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {}


    ##
    ## Test http::mapReply
    ##
    ::tcltest::test http-27.1 {http::mapReply} \
        -setup {
        } \
        -body {
            ::http::mapReply {this is a test}
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {this%20is%20a%20test}

    ##
    ## Test http::ProxyRequire
    ##
    ::tcltest::test http-28.1 {http::ProxyRequire} \
        -setup {
        } \
        -body {
            list Test Not Yet Implemented
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {}


    ##
    ## Test http::CharsetToEncoding
    ##
    ::tcltest::test http-29.1 {http::CharsetToEncoding} \
        -setup {
        } \
        -body {
            list Test Not Yet Implemented
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {}

    ##
    ## Test http::ContentEncoding
    ##
    ::tcltest::test http-30.1 {http::ContentEncoding} \
        -setup {
        } \
        -body {
            list Test Not Yet Implemented
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {}


    ##
    ## Test http::make-transformation-chunked
    ##
    ::tcltest::test http-31.1 {http::make-transformation-chunked} \
        -setup {
        } \
        -body {
            list Test Not Yet Implemented
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {}


    ##
    ## Test http::Connected
    ##
    ::tcltest::test http-32.1 {http::Connected}  \
        -setup {
        } \
        -body {
            list Test Not Yet Implemented
        } \
        -cleanup {
            ::tcltest::testCleanup
        } \
        -result {}

}

# cleanup
catch {unset url}
catch {unset badurl}
catch {unset port}
catch {unset data}

rename bgerror {}
::tcltest::cleanupTests

namespace delete ::httpTest::

# Local variables:
# mode: tcl
# End:
