'\"
'\" Copyright (c) 2013 Tcl Core Team
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
.so man.macros
.TH Tcl_InitSubsystems 3 8.6.1 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_InitSubsystems \- initialize the Tcl library.
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
const char *
\fBTcl_InitSubsystems\fR(\fIpanicProc\fR)
.SH ARGUMENTS
.SH ARGUMENTS
.AS Tcl_PanicProc *panicProc
.AP Tcl_PanicProc *panicProc in
Desired panic function, for error reporting. If NULL, the default
panicProc is used, which normally writes the message to stderr.
.BE

.SH DESCRIPTION
.PP
The \fBTcl_InitSubsystems\fR procedure initializes the Tcl
library. This procedure is typically invoked as the very
first thing in the application's main program.
.PP
\fBTcl_InitSubsystems\fR is very similar in use to
\fBTcl_FindExecutable\fR. It can be used when Tcl is
used as utility library, no other encodings than utf8,
iso8859-1 or unicode are used, and no interest exists in the
value of \fBinfo nameofexecutable\fR. The system encoding will not
be extracted from the environment, but falls back to iso8859-1.
.PP
The return value is the Tcl version.
.PP
If \fBTcl_InitSubsystems()\fR is called in code where 
\fBUSE_TCL_STUBS\fR is set, it does one additional thing:
initialize the Stub table for using Tcl as utility
library, without needing a Tcl interpreter. For example:
.CS
const char *version = Tcl_InitSubSystems(NULL);
/* At this point, Tcl C API calls without interp are ready for use */
int major, minor, patch;
Tcl_GetVersion(&major, &minor, &patch);
.CE
This will work as expected, both with and without stubs.
.SH KEYWORDS
binary, executable file
